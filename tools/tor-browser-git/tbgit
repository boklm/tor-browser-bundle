#!/usr/bin/perl -w
use strict;

use FindBin;
use Getopt::Long;
use IO::CaptureOutput qw(capture_exec);
use File::Slurp qw(read_file write_file);
use File::Basename;
use File::Find;
use File::Temp;
use Cwd qw(getcwd);
use LWP::Simple;
use JSON 'decode_json';

my $docdir = "$FindBin::Bin/doc";
my $hgdir = "$FindBin::Bin/hg_clones";
my $mapfile = "$FindBin::Bin/gecko-mapfile";
my $default_trychooser = 'try: -b d -f -p linux,linux64,linux64-st-an -u reftest,crashtest,xpcshell,jsreftest,marionette,cppunit,jittests,mochitest-1,mochitest-2,mochitest-3,mochitest-4,mochitest-5,mochitest-bc -t none';

my %options;
my %actions = (
    tbgit => {
        cmd => sub {},
        options => [],
    },
    help => {
        cmd => \&cmd_help,
        options => [],
    },
    merge => {
        cmd =>\&cmd_merge,
        options => [ 'list', 'yes', 'no-edit', ],
    },
    pull => {
        cmd => \&cmd_pull,
        options => [ 'list', 'yes', 'no-fetch', ],
    },
    push => {
        cmd => \&cmd_push,
        options => [ 'list', 'yes', 'no-fetch', ],
    },
    'try-results' => {
        cmd => \&cmd_tryresults,
        options => [ 'failed', 'success', ],
    },
    'try-push' => {
        cmd => \&cmd_trypush,
        options => [ 'list', 'yes', 'max-push=i', ],
    },
    'list-branches' => {
        cmd => \&cmd_list_branches,
        options => [],
    },
);

sub exit_error {
    print STDERR "Error: ", $_[0], "\n";
    exit (exists $_[1] ? $_[1] : 1);
}

sub ask_yn {
    my ($msg, $default) = @_;
    my $yn = $default ? $default eq 'y' ? '[Y/n]' : '[y/N]' : '[y/n]';
    print "$msg $yn\n";
    while (my $z = <STDIN>) {
        chomp $z;
        if ($z eq '' && $default) {
            $z = $default;
        }
        if ($z eq 'y' || $z eq 'Y') {
            return 1;
        }
        if ($z eq 'n' || $z eq 'N') {
            return undef;
        }
        print "$msg $yn\n";
    }
    return undef;
}

sub cmd_help {
    my ($cmd) = @_;
    $cmd = 'help' if @_ > 1;
    $cmd = 'tbgit' if @_ == 0;
    exit_error("Unknown commmand $cmd") unless $actions{$cmd};
    print read_file "$docdir/$cmd.txt";
    exit 0;
}

sub run_noerr {
    my @cmd = @_;
    if ($options{'dry-run'}) {
        print "dry-run: ", join(' ', @cmd);
        return;
    }
    exit_error('Failed to run: ' . join(' ', @cmd)) unless system(@cmd) == 0;
}

sub run_noerr_noout {
    my @cmd = @_;
    my (undef, $err, $success) = capture_exec(@cmd);
    exit_error('Failed to run: ' . join(' ', @cmd) . "\n$err") unless $success;
}

sub run_noerr_ask {
    if (!$options{yes}) {
        return unless ask_yn("Run '" . join(' ', @_) . '\'?', 'n');
    }
    run_noerr(@_);
}

sub git_dir {
    for (my $dir = getcwd; $dir ne '/'; $dir = dirname($dir)) {
        return "$dir/.git" if -d "$dir/.git";
    }
    exit_error("Not in a git repository");
}

sub git_current_branch {
    my $d = read_file(git_dir . '/HEAD');
    exit_error "Cannot read HEAD" unless $d;
    return $d =~ m/ref: refs\/heads\/(.+)$/ ? $1 : undef;
}

sub get_versions {
    my $branch = git_current_branch;
    if ($branch && $branch =~ m/^tor-browser-([^-]+)-([^-]+)-.+/) {
        return ($1, $2);
    }
    exit_error "Cannot parse versions in current branch: $branch";
}

sub git_hash {
    my ($branch) = @_;
    my ($out, $err, $success) = capture_exec('git', 'show', '-s',
                                        '--format=%H', "$branch^{commit}");
    chomp $out;
    return $out;
}

sub git_is_ancestor {
    my ($c1, $c2) = @_;
    my ($out, $err, $success) = capture_exec('git', 'merge-base',
                                             '--is-ancestor', $c1, $c2);
    return $success;
}

sub git_notes_get {
    my ($ref, $object) = @_;
    my ($out, $err, $success) = capture_exec('git', 'notes', '--ref',
                                             $ref, 'show', $object);
    return undef unless $success;
    chomp $out;
    return $out;
}

sub git_notes_get_option {
    my ($ref, $object, $opt) = @_;
    my $txt = git_notes_get($ref, $object);
    return () unless defined $txt;
    my @res;
    foreach my $line (split("\n", $txt)) {
        next unless $line =~ m/=/;
        my ($key, $val) = split('=', $line, 2);
        chomp $val;
        push @res, $val if $key eq $opt;
    }
    return @res;
}

sub git_notes_append {
    my ($ref, $object, $txt) = @_;
    run_noerr_noout('git', 'notes', '--ref', $ref, 'append', '-m', $txt, $object);
}

sub git_fetch {
    my ($repo) = @_;
    return if $options{'no-fetch'};
    my ($out, $err, $success) = capture_exec('git', 'fetch', $repo);
    exit_error "Error fetching $repo:\n$err" unless $success;
}

sub branch_exists {
    -f git_dir . '/refs/heads/' . $_[0];
}

sub branches_list {
    my ($refdir, $ffver, $tbver) = @_;
    my $hdir = git_dir . "/refs/$refdir";
    my @branches;
    my $wanted = sub {
        return unless -f $File::Find::name;
        my $branch = $File::Find::name;
        $branch =~ s/^$hdir\///;
        push @branches, $branch;
    };
    find($wanted, $hdir);
    return sort @branches unless $ffver;
    my %b;
    foreach my $branch (@branches) {
        $b{$1} = $branch if ($branch =~ m/^$ffver\/([^\/]+)$/);
    }
    return sort values %b unless $tbver;
    foreach my $branch (@branches) {
        $b{$1} = $branch if ($branch =~ m/^$ffver\/$tbver\/([^\/]+)$/);
    }
    return sort values %b;
}

sub wget_mapfile {
    run_noerr('wget', "-O$mapfile",
        'https://people.mozilla.org/~pmoore/vcs2vcs/gecko-dev/gecko-mapfile');
}

sub hg_git_commits_map {
    my @l = read_file($mapfile);
    my %r = map { (m/^([^ ]+) ([^ ]+)/) } @l;
    chomp %r;
    return \%r;
}

sub git_to_hg_hash {
    my ($git_hash) = @_;
    wget_mapfile() unless -f $mapfile;
    my $map = hg_git_commits_map();
    return $map->{$git_hash} if $map->{$git_hash};
    wget_mapfile();
    $map = hg_git_commits_map();
    exit_error "Could not find hg commit for $git_hash" unless $map->{$git_hash};
    return $map->{$git_hash};
}

sub hg_clone_init {
    my ($name) = @_;
    my $oldcwd = getcwd;
    mkdir $hgdir unless -d $hgdir;
    chdir $hgdir;
    run_noerr('hg', 'clone', '-v',
        "https://hg.mozilla.org/releases/$name", $name) unless -d $name;
    chdir $name;
    run_noerr_noout('hg', 'qpop', '--all');
    my ($unapplied) = capture_exec('hg', 'qunapplied');
    foreach my $u (split "\n", $unapplied) {
        chomp $u;
        run_noerr_noout('hg', 'qdelete', $u);
    }
    run_noerr_noout('hg', 'pull');
    chdir $oldcwd;
}

sub try_torbrowser_patch {
    my ($git_branch, $git_base) = @_;
    my ($log) = capture_exec('git', 'log', "$git_base..$git_branch");
    my ($diff) = capture_exec('git', 'diff', "$git_base..$git_branch");
    my $file = File::Temp->new();
    write_file($file, "Tor Browser: $git_branch\n\n$log\n$diff");
    return $file;
}

sub get_esr_version {
    my ($branch) = @_;
    return $1 if $branch =~ m/^(\d+)\.\d+\.\d+esr\//;
    exit_error "Cannot get esr version from branch $branch";
}

sub push_to_try {
    my ($git_branch, $git_base) = @_;
    my $esr_version = get_esr_version($git_branch);
    my $tbpatch = try_torbrowser_patch($git_branch, $git_base);
    my $hg_base = git_to_hg_hash(git_hash($git_base));
    hg_clone_init("mozilla-esr$esr_version");
    my $oldcwd = getcwd;
    chdir "$hgdir/mozilla-esr$esr_version";
    run_noerr_noout('hg', 'update', '-C', $hg_base);
    run_noerr_noout('hg', 'qimport', '-P', $tbpatch->filename, '-n',
                    'torbrowser.patch');
    run_noerr_noout('hg', 'qnew', '-m', $default_trychooser, 'trychooser');
    my ($hg_id) = capture_exec('hg', 'id', '-i');
    chomp $hg_id;
    print "Pushing $hg_id to Try\n";
    run_noerr(qw(hg push -r tip -f ssh://hg.mozilla.org/try/));
    chdir $oldcwd;
    git_notes_append('try-push', $git_branch, "pushid=$hg_id");
}

sub cmd_merge {
    cmd_help('merge') unless @_ == 0;
    my ($ffver, $tbver) = get_versions;
    my @branches = branches_list('heads', $ffver, $tbver);
    foreach my $branch (@branches) {
        next if git_is_ancestor($branch, 'HEAD');
        if ($options{list}) {
            print "$branch\n";
            next;
        }
        run_noerr_ask('git', 'merge',
                      $options{'no-edit'} ? ('--no-edit') : (), $branch);
    }
}

sub cmd_pull {
    cmd_help('pull') unless @_ == 1;
    my ($remote) = @_;
    my ($ffver, $tbver) = get_versions;
    git_fetch($remote);
    my @local_branches = branches_list("heads", $ffver, $tbver);
    my @remote_branches = branches_list("remotes/$remote", $ffver, $tbver);
    my %l = map { $_ => 1 } @local_branches;
    my %r = map { $_ => 1 } @remote_branches;
    foreach my $branch (@remote_branches) {
        if (!$l{$branch}) {
            print "$branch (new)\n";
        } elsif (!git_is_ancestor("$remote/$branch", $branch)) {
            if (git_is_ancestor($branch, "$remote/$branch")) {
                if ($options{list}) {
                    print "$branch (pull)\n";
                    next;
                }
                run_noerr_ask('git', 'update-ref', $branch, "$remote/$branch");
            } else {
                if ($options{list}) {
                    print "$branch (non-ff pull)\n";
                    next;
                }
                print "Warning: non fast-forward pull. You may lose some commits.\n";
                run_noerr_ask('git', 'update-ref', $branch, "$remote/$branch");
            }
        }
    }
    foreach my $branch (@local_branches) {
        if (!$r{$branch}) {
            if ($options{list}) {
                print "$branch (remove)\n";
                next;
            }
            print "Warning: removing branch $branch\n";
            run_noerr_ask('git', 'branch', '-D', $branch);
        }
    }
}

sub cmd_push {
    cmd_help('push') unless @_ == 1;
    my ($remote) = @_;
    my ($ffver, $tbver) = get_versions;
    git_fetch($remote);
    my @local_branches = branches_list("heads", $ffver, $tbver);
    my @remote_branches = branches_list("remotes/$remote", $ffver, $tbver);
    my %l = map { $_ => 1 } @local_branches;
    my %r = map { $_ => 1 } @remote_branches;
    foreach my $branch (@remote_branches) {
        next unless $l{$branch};
        next if git_hash($branch) eq git_hash("$remote/$branch");
        if (git_is_ancestor("$remote/$branch", $branch)) {
            print "$branch (push)\n";
            next if $options{list};
            run_noerr_ask('git', 'push', $remote, "$branch:$branch");
        } else {
            print "$branch (non-ff push)\n";
            next if $options{list};
            print "Warning: non fast-forward push required on $branch\n";
        }
    }
    foreach my $branch (@local_branches) {
        next if $r{$branch};
        print "$branch (new)\n";
        next if $options{list};
        run_noerr_ask('git', 'push', $remote, "$branch:$branch");
    }
}

sub treeherder_get_result_set_id {
    my ($hg_hash) = @_;
    my $url = 'https://treeherder.mozilla.org/api/project/try/resultset/'
              . "?count=10&full=true&revision=$hg_hash";
    my $content = get($url);
    exit_error "Cannot get $url" unless $content;
    my $data = decode_json($content);
    exit_error "Error getting resultset id" unless $data->{results}->[0]->{id};
    return $data->{results}->[0]->{id};
}

sub treeherder_get_jobs {
    my ($hg_hash) = @_;
    my $resultset_id = treeherder_get_result_set_id($hg_hash);
    my $url = 'https://treeherder.mozilla.org/api/project/try/jobs/?count=2000&'
              . "result_set_id=$resultset_id&return_type=list";
    my $content = get($url);
    exit_error "Cannot get $url" unless $content;
    my $data = decode_json($content);
    my @jobs;
    my @prop_names = @{$data->{job_property_names}};
    foreach my $result (@{$data->{results}}) {
        my @res = @$result;
        my %job;
        foreach my $prop_name (@prop_names) {
            $job{$prop_name} = shift @res;
        }
        push @jobs, \%job;
    }
    return @jobs;
}

sub treeherder_jobs_by_status {
    my @jobs = @_;
    my %j;
    foreach my $job (@jobs) {
        next if $job->{job_group_symbol} eq 'R-e10s';
        next if $job->{result} eq 'retry';
        my $name;
        my $status;
        if ($job->{job_group_symbol} eq '?') {
            $name = $job->{job_type_symbol};
        } else {
            $name = "$job->{job_group_symbol}($job->{job_type_symbol})";
        }
        if ($job->{state} eq 'completed') {
            $status = $job->{result};
        } else {
            $status = $job->{state};
        }
        push @{$j{$status}}, $name;
    }
    return \%j;
}

sub sort_uniq {
    my %k = map { $_ => 1 } @_;
    return sort keys %k;
}

sub cmd_tryresults {
    cmd_help('try-results') unless @_ == 0;
    my ($ffver, $tbver) = get_versions;
    my @branches = branches_list("heads", $ffver, $tbver);
    foreach my $branch (sort @branches) {
        my $trypush = git_notes_get('try-push', $branch);
        if (git_notes_get_option('try-push', $branch, 'notry') && !$options{failed}) {
            next if $options{failed};
            next if $options{success};
            print "$branch:\n  Will not be submitted\n";
        } elsif (my @pushid = git_notes_get_option('try-push', $branch, 'pushid')) {
            my ($id) = @pushid;
            my $jobs = treeherder_jobs_by_status(treeherder_get_jobs($id));
            if ($options{failed} && join('', keys %$jobs) eq 'success') {
                next;
            }
            if ($options{success} && join('', keys %$jobs) ne 'success') {
                next;
            }
            print "$branch:\n  https://treeherder.mozilla.org/#/jobs?repo=try&revision=$id\n";
            foreach my $status (sort keys %$jobs) {
                next if $status eq 'success';
                print "  $status: ", join(', ', sort_uniq(@{$jobs->{$status}})), "\n";
            }
        } else {
            next if $options{failed};
            next if $options{success};
            print "$branch:\n  Not submitted yet\n";
        }
        print "\n";
    }
}

sub cmd_trypush {
    my ($ffver, $tbver) = get_versions;
    my $max_push = $options{'max-push'} ? $options{'max-push'} : 1;
    my $nb_push = 0;
    my @branches = branches_list("heads", $ffver, $tbver);
    foreach my $branch (sort @branches) {
        next if git_notes_get_option('try-push', $branch, 'pushid');
        next if git_notes_get_option('try-push', $branch, 'notry');
        if ($options{list}) {
            print "$branch\n";
            next;
        }
        exit 0 if $nb_push >= $max_push;
        if ($options{yes} || ask_yn("Push $branch to try?", 'y')) {
            push_to_try($branch, "$ffver/base");
            $nb_push++;
        }
    }
}

sub cmd_list_branches {
    cmd_help('list-branches') unless @_ == 0;
    my ($ffver, $tbver) = get_versions;
    my @branches = branches_list("heads", $ffver, $tbver);
    foreach my $branch (sort @branches) {
        next if $branch eq "$ffver/base";
        print "$branch:\n";
        system('git', 'log', '--format=  %h %s', "$ffver/base..$branch");
        print "\n";
    }
}

if (@ARGV && $actions{$ARGV[0]}) {
    my $action = shift @ARGV;
    Getopt::Long::GetOptionsFromArray(\@ARGV, \%options, 'help', @{$actions{$action}->{options}});
    cmd_help($action) if $options{help};
    $actions{$action}->{cmd}(@ARGV);
} else {
    cmd_help('tbgit');
}
